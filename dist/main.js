(()=>{const t={append(t){const e=l=>{if(null===l.next){const e=n();e.value=t,l.next=e}else e(l.next)};e(this)},prepend(t){const e=this,l=n();l.value=e.value,l.next=e.next,e.value=t,e.next=l},size(){return function t(n){return null===n.next?1:1+t(n.next)}(this)},head(){return this},tail(){if(null===this.next)return this;let t=this;for(;null!==t.next;)t=t.next;return t},at(t){return function t(n,e){return 0===n?e:n>0&&null===e.next?"Sorry pal":t(n-1,e.next)}(t,this)},pop(){const t=this.size();let n=1,e=this;for(;n<t-1;)e=e.next,n++;e.next=null},contains(t){return function n(e){return e.value===t||null!==e.next&&n(e.next)}(this)},find(t){return function n(e){return e.value===t?0:null===e.next?null:1+n(e.next)}(this)},toString(){let t=`( ${this.value} )`;return function n(e){return null===e.next?(t=`${t} -> ( ${e.value} ) -> Null`,t):(t=`${t} -> ( ${e.value} )`,n(e.next))}(this.next)},insertAt(t,e){0===e&&this.prepend(t);let l=this,u=null;const r=n();r.value=t;for(let t=1;t<=e;t++)u=l,l=l.next;return u.next=r,r.next=l,this},removeAt(t){let n=this,e=null,l=this.next;for(let u=1;u<=t;u++)e=n,n=n.next,l=n.next;return e.next=l,this}};function n(){const t=Object.create({});return t.value=null,t.next=null,t}const e=function(n){const e=Object.create(t);return e.value=1,e.next=null,e}();e.append(2),e.append(3),e.append(4),e.append(5)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,